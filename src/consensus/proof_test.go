package consensus

import (
	"github.com/dblokhin/gringo/src/secp256k1zkp"
	"testing"
	"time"
)

func TestValidProof(t *testing.T) {
	// Block header for height 126158.
	header := BlockHeader{
		Version: 0x2,
		Height:  0x1ecce,
		Previous: Hash{
			0x16, 0x1f, 0x41, 0x57, 0xc4, 0x5e, 0xc6, 0x2b, 0x82, 0x8a, 0x88,
			0xf6, 0xec, 0xdf, 0x76, 0x15, 0x34, 0x9e, 0x26, 0x8e, 0x1c, 0xb1,
			0xf2, 0xaf, 0x78, 0xc0, 0x94, 0x68, 0xdc, 0xde, 0x4d, 0xf4,
		},
		Timestamp: time.Unix(1538817020, 0).UTC(),
		UTXORoot: Hash{
			0xe2, 0x8, 0x77, 0xcc, 0xf, 0xe5, 0x2f, 0x17, 0x27, 0xd9, 0x1b,
			0x21, 0x51, 0xae, 0x53, 0xee, 0x40, 0xa0, 0xea, 0x36, 0xd5, 0xe9,
			0xc3, 0x5c, 0x59, 0x1b, 0x72, 0x23, 0x1e, 0x70, 0x25, 0x0,
		},
		RangeProofRoot: Hash{
			0xe8, 0xe, 0xa5, 0xc1, 0x5c, 0x93, 0xac, 0x4b, 0xbe, 0x81, 0xec,
			0x6c, 0xb8, 0x58, 0x19, 0xed, 0x99, 0x40, 0x6f, 0xaa, 0x3e, 0x3b,
			0x14, 0x8e, 0x2a, 0x7d, 0x72, 0x73, 0x1e, 0x41, 0x5f, 0x94,
		},
		KernelRoot: Hash{
			0xa6, 0xd8, 0x6a, 0xc9, 0x3a, 0x65, 0x68, 0xed, 0xf4, 0x16, 0x73,
			0x2d, 0x69, 0x49, 0xf1, 0xb1, 0x6e, 0x64, 0x2c, 0xc6, 0x35, 0x8b,
			0xf9, 0xe3, 0xc2, 0xc1, 0x63, 0x9a, 0x1, 0xed, 0x64, 0x9f,
		},
		Nonce: 0x95a00c23706e7b13,
		TotalKernelOffset: Hash{
			0xab, 0x79, 0x3a, 0x1, 0xc6, 0x1d, 0x6, 0xa6, 0x54, 0xa5, 0xfb,
			0x8c, 0x4a, 0xfb, 0x24, 0x4d, 0xe7, 0x94, 0x7a, 0x54, 0x72, 0xfa,
			0x52, 0x2a, 0x65, 0x79, 0x23, 0xfc, 0xf1, 0xcc, 0x73, 0xf8,
		},
		TotalKernelSum: secp256k1zkp.Commitment{
			0x8, 0xce, 0xc2, 0xc6, 0x43, 0x80, 0xfa, 0x2c, 0xba, 0xcf, 0x13,
			0x6c, 0x27, 0x14, 0xf8, 0xb5, 0x49, 0xd, 0xc8, 0x77, 0xf3, 0xe2,
			0xf, 0x23, 0x3d, 0x49, 0xbf, 0xeb, 0x83, 0x36, 0x9e, 0xf5, 0xf3,
		},
		OutputMmrSize: 0x443a9,
		KernelMmrSize: 0x4010e,
		POW: Proof{
			CuckooSizeShift: 0x1e,
			Nonces: []uint32{
				0x7a5129, 0xaed072, 0x23474bb, 0x2354065, 0x285a90e,
				0x3907c82, 0x3af3e1b, 0x3d3b1b1, 0x4128e08, 0x4cff857,
				0x69693a7, 0x6ca7c9f, 0x8dd05c9, 0xa922eb3, 0xb440ad0,
				0xd002b66, 0xd7cbade, 0xd879789, 0xeabce96, 0xfa7632e,
				0xfb05c34, 0xfea1506, 0x100a06a3, 0x1095e0fd, 0x1121bf2d,
				0x127a2c0f, 0x12d7d6a6, 0x134be05f, 0x13dd901f, 0x14d5cc30,
				0x162a79d1, 0x186683f9, 0x193e786b, 0x19a1e1e8, 0x1b4f7363,
				0x1bd90b38, 0x1c236cf0, 0x1c83b3ba, 0x1c9c8e67, 0x1d5028c8,
				0x1d9b3b30, 0x1e8cfa87,
			},
		},
		TotalDifficulty:   0x3142977,
		ScalingDifficulty: 0x1,
	}

	if err := header.Validate(); err != nil {
		t.Errorf("Failed to validate block header: %v", err)
	}
}
